<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 여기서 쿼리문 작성 -->
<mapper namespace="vue.example.demo.Mapper.Postmapper"> <!-- namespace 설정 -->
    <!-- 전체 글 보기 -->
    <select id="getPostList" parameterType="vue.example.demo.DTO.PostDTO" resultType="hashmap" >
        SELECT p.POST_NO, p.BOARD_ID, p.POST_TITLE, p.POST_AUTHOR, p.POST_TIME, COUNT(c.COMM_NO) AS TOTAL, POST_EDITS, POST_EDIT_TIME
        FROM POST_TABLE p
        LEFT JOIN COMMENT_TABLE c ON p.POST_NO = c.POST_NO
        WHERE p.BOARD_ID = #{boardId}
        GROUP BY p.POST_NO, p.BOARD_ID, p.POST_TITLE, p.POST_AUTHOR, p.POST_TIME, POST_EDITS, POST_EDIT_TIME
        ORDER BY p.POST_NO DESC
    </select>

    <!-- 글 상세 보기(글 내용보기) -->
    <select id="getPostContent" parameterType="vue.example.demo.DTO.PostDTO" resultType="hashmap" >
        SELECT p.POST_TITLE, DBMS_LOB.SUBSTR(p.POST_CONTENT, DBMS_LOB.GETLENGTH(p.POST_CONTENT)) AS POST_CONTENT, p.POST_AUTHOR, p.POST_TIME, POST_EDITS, POST_EDIT_TIME
        FROM POST_TABLE p
        WHERE p.BOARD_ID = #{boardId} AND p.POST_NO = #{postNo}
        GROUP BY p.POST_TITLE, DBMS_LOB.SUBSTR(p.POST_CONTENT, DBMS_LOB.GETLENGTH(p.POST_CONTENT)), p.POST_AUTHOR, p.POST_TIME, POST_EDITS, POST_EDIT_TIME
    </select>

    <insert id="insertPost" parameterType="hashmap">
        <!-- USER_TABLE에 데이터 삽입 -->
        INSERT INTO POST_TABLE 
        VALUES (POST_SEQ.NEXTVAL,#{boardId},#{postTitle},#{postContent},#{userId},sysdate,'N',null)

        <selectKey keyProperty="POST_SEQ" resultType="int" order="AFTER">
            SELECT POST_SEQ.CURRVAL FROM DUAL
        </selectKey>
        <!-- #{변수} 형태로 바인딩 변수를 사용하여 데이터를 삽입 -->
    </insert>

    <update id="updatePost" parameterType="hashmap">
        UPDATE POST_TABLE 
        SET POST_TITLE = #{postTitle},  
        POST_CONTENT = #{postContent},
        POST_EDITS = 'Y',
        POST_EDIT_TIME = sysdate
        WHERE POST_NO = #{postNo}
        <selectKey keyProperty="POST_NO" resultType="int" order="AFTER">
            SELECT POST_NO
            FROM POST_TABLE
            WHERE POST_NO = #{postNo}
        </selectKey>
    </update>

    <delete id="deletePost" parameterType="int">
        DELETE FROM POST_TABLE WHERE POST_NO = #{postNo}
    </delete>
    
    <!-- 태그 -->
    <select id="checkTag" resultType="int" parameterType="String"> 
    <!-- 해당 태그가 존재하는지 카운트 -->
        SELECT COUNT(TAG_NAME) AS TOTAL
        FROM TAG_TABLE
        WHERE TAG_NAME = #{tagName}
    </select>

    <select id="checkPostTag" resultType="int" parameterType="String"> 
    <!-- 포스트에 태그가 존재하는지 카운트 -->
        SELECT COUNT(POST_NO) AS total
        FROM POST_TAG_MATCH_TABLE
        WHERE POST_NO = #{postNo}
    </select>

    <select id="getPostTag" resultType="hashmap" parameterType="String"> 
    <!-- 태그 꺼내기 -->
        SELECT TAG_NAME
        FROM POST_TAG_MATCH_TABLE
        WHERE POST_NO = #{postNo}
    </select>
    
    <insert id="insertTag" parameterType="String">
        INSERT INTO TAG_TABLE
        VALUES (TAG_SEQ.NEXTVAL, #{tagName})
    </insert>

    <insert id="insertMatch" parameterType="hashmap">
    <!-- 포스트&태그 매치 테이블에 적용 -->
        INSERT INTO post_tag_match_table
        VALUES (#{postNo}, #{tagName})
    </insert>

    <select id="searchTag" parameterType="String" resultType="hashmap">
        SELECT m.tag_name, p.POST_NO, p.board_id, p.post_title, u.user_name, p.post_time, p.post_edits, p.post_edit_time
        FROM post_tag_match_table m
        LEFT JOIN post_table p ON p.post_no = m.post_no
        LEFT JOIN user_table u ON p.post_author = u.user_id
        WHERE m.tag_name = #{tagName}
        ORDER BY p.post_no DESC
    </select>

    
</mapper>